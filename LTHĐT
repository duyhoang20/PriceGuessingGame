// Program.cs
using PriceGuessingGame.Managers;
using PriceGuessingGame.Models;
using PriceGuessingGame.Services;
using System;
using System.Xml.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace PriceGuessingGame
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.OutputEncoding = Encoding.UTF8;
            try
            {
                GameManager gameManager = new GameManager();
                gameManager.StartGame();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Lỗi khởi động chương trình: {ex.Message}");
            }
        }
    }
}

// Models/Product.cs

namespace PriceGuessingGame.Models
{
    [Serializable]
    public class Product
    {
        private string _name;
        private decimal _price;

        public string Name
        {
            get { return _name; }
            set { _name = value; }
        }

        public decimal Price
        {
            get { return _price; }
            set { _price = value; }
        }

        public Product() { }

        public Product(string name, decimal price)
        {
            _name = name;
            _price = price;
        }

        public override string ToString()
        {
            return $"{_name} - {_price:N0} VND";
        }
    }
}

// Models/GameLevel.cs

namespace PriceGuessingGame.Models
{
    public abstract class GameLevel
    {
        protected List<Product> Products;
        protected int NumberOfProducts;
        protected string LevelName;
        protected int MaxAttempts;
        protected Random random;

        public GameLevel(string levelName, int numberOfProducts, int maxAttempts)
        {
            LevelName = levelName;
            NumberOfProducts = numberOfProducts;
            MaxAttempts = maxAttempts;
            Products = new List<Product>();
            random = new Random();
        }

        public abstract void Initialize(List<Product> allProducts);
        public abstract int Play();

        protected void ShuffleProducts()
        {
            int n = Products.Count;
            while (n > 1)
            {
                n--;
                int k = random.Next(n + 1);
                Product temp = Products[k];
                Products[k] = Products[n];
                Products[n] = temp;
            }
        }

        protected List<decimal> GenerateRandomPrices(decimal correctPrice, decimal minPrice, decimal maxPrice, int count)
        {
            var prices = new List<decimal> { correctPrice };

            while (prices.Count < count)
            {
                // Tạo giá ngẫu nhiên trong khoảng ±30% của giá đúng
                decimal randomPrice;
                do
                {
                    double percentage = random.NextDouble() * 0.6 - 0.3; // -30% to +30%
                    randomPrice = correctPrice * (1 + (decimal)percentage);
                    // Làm tròn đến hàng nghìn
                    randomPrice = Math.Round(randomPrice / 1000) * 1000;
                } while (prices.Contains(randomPrice) || randomPrice < minPrice || randomPrice > maxPrice);

                prices.Add(randomPrice);
            }

            // Xáo trộn các giá
            int n = prices.Count;
            while (n > 1)
            {
                n--;
                int k = random.Next(n + 1);
                decimal temp = prices[k];
                prices[k] = prices[n];
                prices[n] = temp;
            }

            return prices;
        }
    }
}
// Models/EasyLevel.cs
namespace PriceGuessingGame.Models
{
    public class EasyLevel : GameLevel
    {
        public EasyLevel() : base("Dễ", 3, 2) { }

        public override void Initialize(List<Product> allProducts)
        {
            if (allProducts.Count < NumberOfProducts)
            {
                throw new InvalidOperationException("Không đủ sản phẩm để khởi tạo level!");
            }

            Products.Clear();
            var selectedIndices = new List<int>();

            while (Products.Count < NumberOfProducts)
            {
                int index = random.Next(allProducts.Count);
                if (!selectedIndices.Contains(index))
                {
                    selectedIndices.Add(index);
                    Products.Add(allProducts[index]);
                }
            }

            ShuffleProducts();
        }

        public override int Play()
        {
            Console.Clear();
            Console.WriteLine($"\n=== LEVEL {LevelName.ToUpper()} ===");
            Console.WriteLine($"Hãy chọn giá đúng cho {NumberOfProducts} sản phẩm sau:");
            Console.WriteLine($"Bạn có {MaxAttempts} lượt cho mỗi sản phẩm\n");

            int score = 0;

            foreach (var product in Products)
            {
                int attempts = 0;
                bool correct = false;
                decimal minPrice = product.Price * 0.7m;
                decimal maxPrice = product.Price * 1.3m;

                var prices = GenerateRandomPrices(product.Price, minPrice, maxPrice, 3);

                while (attempts < MaxAttempts && !correct)
                {
                    Console.WriteLine($"\nSản phẩm: {product.Name}");
                    Console.WriteLine("Các mức giá (VND):");

                    for (int i = 0; i < prices.Count; i++)
                    {
                        Console.WriteLine($"{i + 1}. {prices[i]:N0}");
                    }

                    Console.Write($"\nLượt {attempts + 1}/{MaxAttempts} - Nhập lựa chọn của bạn (1-{prices.Count}): ");

                    if (int.TryParse(Console.ReadLine(), out int choice) && choice >= 1 && choice <= prices.Count)
                    {
                        if (prices[choice - 1] == product.Price)
                        {
                            Console.WriteLine("\nChính xác! +1 điểm");
                            score++;
                            correct = true;
                        }
                        else
                        {
                            Console.WriteLine($"Sai rồi! {(attempts < MaxAttempts - 1 ? "Hãy thử lại!" : $"Giá đúng là: {product.Price:N0} VND")}");
                        }
                    }
                    else
                    {
                        Console.WriteLine("Lựa chọn không hợp lệ!");
                    }

                    attempts++;
                }

                if (!correct)
                {
                    Console.WriteLine($"\nĐáp án đúng là: {product.Price:N0} VND");
                    Console.WriteLine("Nhấn Enter để tiếp tục...");
                    Console.ReadLine();
                }
            }

            return score;
        }
    }
}

// Models/MediumLevel.cs
namespace PriceGuessingGame.Models
{
    public class MediumLevel : GameLevel
    {
        public MediumLevel() : base("Vừa", 5, 2) { }

        public override void Initialize(List<Product> allProducts)
        {
            if (allProducts.Count < NumberOfProducts)
            {
                throw new InvalidOperationException("Không đủ sản phẩm để khởi tạo level!");
            }

            Products.Clear();
            var selectedIndices = new List<int>();

            while (Products.Count < NumberOfProducts)
            {
                int index = random.Next(allProducts.Count);
                if (!selectedIndices.Contains(index))
                {
                    selectedIndices.Add(index);
                    Products.Add(allProducts[index]);
                }
            }

            ShuffleProducts();
        }

        public override int Play()
        {
            Console.Clear();
            Console.WriteLine($"\n=== LEVEL {LevelName.ToUpper()} ===");
            Console.WriteLine($"Hãy chọn giá đúng cho {NumberOfProducts} sản phẩm sau:");
            Console.WriteLine($"Bạn có {MaxAttempts} lượt cho mỗi sản phẩm\n");

            int score = 0;

            foreach (var product in Products)
            {
                int attempts = 0;
                bool correct = false;
                decimal minPrice = product.Price * 0.7m;
                decimal maxPrice = product.Price * 1.3m;

                var prices = GenerateRandomPrices(product.Price, minPrice, maxPrice, 5);

                while (attempts < MaxAttempts && !correct)
                {
                    Console.WriteLine($"\nSản phẩm: {product.Name}");
                    Console.WriteLine("Các mức giá (VND):");

                    for (int i = 0; i < prices.Count; i++)
                    {
                        Console.WriteLine($"{i + 1}. {prices[i]:N0}");
                    }

                    Console.Write($"\nLượt {attempts + 1}/{MaxAttempts} - Nhập lựa chọn của bạn (1-{prices.Count}): ");

                    if (int.TryParse(Console.ReadLine(), out int choice) && choice >= 1 && choice <= prices.Count)
                    {
                        if (prices[choice - 1] == product.Price)
                        {
                            Console.WriteLine("\nChính xác! +1 điểm");
                            score++;
                            correct = true;
                        }
                        else
                        {
                            Console.WriteLine($"Sai rồi! {(attempts < MaxAttempts - 1 ? "Hãy thử lại!" : $"Giá đúng là: {product.Price:N0} VND")}");
                        }
                    }
                    else
                    {
                        Console.WriteLine("Lựa chọn không hợp lệ!");
                    }

                    attempts++;
                }

                if (!correct)
                {
                    Console.WriteLine($"\nĐáp án đúng là: {product.Price:N0} VND");
                    Console.WriteLine("Nhấn Enter để tiếp tục...");
                    Console.ReadLine();
                }
            }

            return score;
        }
    }
}

// Models/HardLevel.cs
namespace PriceGuessingGame.Models
{
    public class HardLevel : GameLevel
    {
        public HardLevel() : base("Khó", 8, 1) { }

        public override void Initialize(List<Product> allProducts)
        {
            if (allProducts.Count < NumberOfProducts)
            {
                throw new InvalidOperationException("Không đủ sản phẩm để khởi tạo level!");
            }

            Products.Clear();
            var selectedIndices = new List<int>();

            while (Products.Count < NumberOfProducts)
            {
                int index = random.Next(allProducts.Count);
                if (!selectedIndices.Contains(index))
                {
                    selectedIndices.Add(index);
                    Products.Add(allProducts[index]);
                }
            }

            ShuffleProducts();
        }

        public override int Play()
        {
            Console.Clear();
            Console.WriteLine($"\n=== LEVEL {LevelName.ToUpper()} ===");
            Console.WriteLine($"Hãy chọn giá đúng cho {NumberOfProducts} sản phẩm sau:");
            Console.WriteLine($"CẢNH BÁO: Bạn chỉ có {MaxAttempts} lượt cho mỗi sản phẩm!");
            Console.WriteLine("Hãy suy nghĩ kỹ trước khi trả lời.\n");

            int score = 0;

            foreach (var product in Products)
            {
                decimal minPrice = product.Price * 0.7m;
                decimal maxPrice = product.Price * 1.3m;

                var prices = GenerateRandomPrices(product.Price, minPrice, maxPrice, 8);

                Console.WriteLine($"\nSản phẩm: {product.Name}");
                Console.WriteLine("Các mức giá (VND):");

                for (int i = 0; i < prices.Count; i++)
                {
                    Console.WriteLine($"{i + 1}. {prices[i]:N0}");
                }

                Console.Write($"\nChỉ có 1 lượt - Nhập lựa chọn của bạn (1-{prices.Count}): ");

                if (int.TryParse(Console.ReadLine(), out int choice) && choice >= 1 && choice <= prices.Count)
                {
                    if (prices[choice - 1] == product.Price)
                    {
                        Console.WriteLine("\nChính xác! +1 điểm");
                        score++;
                    }
                    else
                    {
                        Console.WriteLine($"\nSai rồi! Giá đúng là: {product.Price:N0} VND");
                    }
                }
                else
                {
                    Console.WriteLine("Lựa chọn không hợp lệ!");
                }

                if (Products.IndexOf(product) < Products.Count - 1)
                {
                    Console.WriteLine("\nNhấn Enter để tiếp tục...");
                    Console.ReadLine();
                }
            }

            return score;
        }
    }
}
// Services/IDataService.cs

namespace PriceGuessingGame.Services
{
    public interface IDataService
    {
        List<Product> LoadProducts();
        void SaveProducts(List<Product> products);
    }
}

// Services/FileDataService.cs
namespace PriceGuessingGame.Services
{
    public class FileDataService : IDataService
    {
        private readonly string _txtPath = "sanpham.txt";
        private readonly string _xmlPath = "sanpham.xml";

        public List<Product> LoadProducts()
        {
            if (!File.Exists(_xmlPath))
            {
                List<Product> products = LoadFromTextFile();
                SaveProducts(products);
                return products;
            }

            XmlSerializer serializer = new XmlSerializer(typeof(List<Product>));
            using (FileStream fs = new FileStream(_xmlPath, FileMode.Open))
            {
                return (List<Product>)serializer.Deserialize(fs);
            }
        }

        public void SaveProducts(List<Product> products)
        {
            XmlSerializer serializer = new XmlSerializer(typeof(List<Product>));
            using (FileStream fs = new FileStream(_xmlPath, FileMode.Create))
            {
                serializer.Serialize(fs, products);
            }
        }

        private List<Product> LoadFromTextFile()
        {
            if (!File.Exists(_txtPath))
            {
                throw new FileNotFoundException($"Không tìm thấy file {_txtPath}!");
            }

            List<Product> products = new List<Product>();
            string[] lines = File.ReadAllLines(_txtPath);

            foreach (string line in lines)
            {
                string[] parts = line.Split(',');
                if (parts.Length == 2)
                {
                    string name = parts[0].Trim();
                    if (decimal.TryParse(parts[1].Trim(), out decimal price))
                    {
                        products.Add(new Product(name, price));
                    }
                }
            }

            if (products.Count == 0)
            {
                throw new Exception($"Không có dữ liệu hợp lệ trong file {_txtPath}!");
            }

            return products;
        }
    }
}

// Services/IGameService.cs

namespace PriceGuessingGame.Services
{
    public interface IGameService
    {
        void PlayGame(GameLevel level);
    }
}

// Services/GameService.cs

// Services/GameService.cs
namespace PriceGuessingGame.Services
{
    public class GameService : IGameService
    {
        private readonly IDataService _dataService;
        private readonly IScoreManager _scoreManager;
        private readonly IPlayerManager _playerManager;

        public GameService(IDataService dataService, IScoreManager scoreManager, IPlayerManager playerManager)
        {
            _dataService = dataService;
            _scoreManager = scoreManager;
            _playerManager = playerManager;
        }

        public void PlayGame(GameLevel level)
        {
            try
            {
                List<Product> allProducts = _dataService.LoadProducts();
                level.Initialize(allProducts);
                int score = level.Play();

                // Lưu điểm cao
                _scoreManager.SaveScore(score);

                // Cập nhật điểm cho người chơi
                var currentPlayer = _playerManager.GetCurrentPlayer();
                currentPlayer.AddScore(score);
                _playerManager.SavePlayer(currentPlayer);

                Console.WriteLine($"\nKết thúc level! Điểm của bạn: {score}");
                Console.WriteLine("\nNhấn Enter để tiếp tục...");
                Console.ReadLine();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Lỗi trong quá trình chơi game: {ex.Message}");
                Console.WriteLine("\nNhấn Enter để tiếp tục...");
                Console.ReadLine();
            }
        }
    }
}

// Services/IScoreManager.cs

namespace PriceGuessingGame.Services
{
    public interface IScoreManager
    {
        void SaveScore(int score);
        List<int> GetHighScores();
        void ClearScores();
    }
}

// Services/ScoreManager.cs

namespace PriceGuessingGame.Services
{
    public class ScoreManager : IScoreManager
    {
        private List<int> _highScores;
        private readonly string _scoreFilePath = "highscores.xml";
        private const int MaxHighScores = 5;

        public ScoreManager()
        {
            _highScores = LoadHighScores();
        }

        public void SaveScore(int score)
        {
            _highScores.Add(score);
            _highScores.Sort();
            _highScores.Reverse();

            if (_highScores.Count > MaxHighScores)
            {
                _highScores = _highScores.GetRange(0, MaxHighScores);
            }

            SaveHighScores();
        }

        public List<int> GetHighScores()
        {
            return new List<int>(_highScores);
        }

        public void ClearScores()
        {
            _highScores.Clear();
            SaveHighScores();
        }

        private List<int> LoadHighScores()
        {
            if (!File.Exists(_scoreFilePath))
            {
                return new List<int>();
            }

            try
            {
                XmlSerializer serializer = new XmlSerializer(typeof(List<int>));
                using (FileStream fs = new FileStream(_scoreFilePath, FileMode.Open))
                {
                    return (List<int>)serializer.Deserialize(fs);
                }
            }
            catch (Exception)
            {
                return new List<int>();
            }
        }

        private void SaveHighScores()
        {
            try
            {
                XmlSerializer serializer = new XmlSerializer(typeof(List<int>));
                using (FileStream fs = new FileStream(_scoreFilePath, FileMode.Create))
                {
                    serializer.Serialize(fs, _highScores);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Lỗi khi lưu điểm cao: {ex.Message}");
            }
        }
    }
}

// Models/Player.cs

namespace PriceGuessingGame.Models
{
    [Serializable]
    public class Player
    {
        private string _name;
        private int _totalScore;
        private int _gamesPlayed;

        public string Name
        {
            get { return _name; }
            set { _name = value; }
        }

        public int TotalScore
        {
            get { return _totalScore; }
            set { _totalScore = value; }
        }

        public int GamesPlayed
        {
            get { return _gamesPlayed; }
            set { _gamesPlayed = value; }
        }

        public double AverageScore
        {
            get { return _gamesPlayed > 0 ? (double)_totalScore / _gamesPlayed : 0; }
        }

        public Player(string name)
        {
            _name = name;
            _totalScore = 0;
            _gamesPlayed = 0;
        }

        public void AddScore(int score)
        {
            _totalScore += score;
            _gamesPlayed++;
        }
    }
}

// Services/IPlayerManager.cs

namespace PriceGuessingGame.Services
{
    public interface IPlayerManager
    {
        Player GetCurrentPlayer();
        void SavePlayer(Player player);
    }
}

// Services/PlayerManager.cs

namespace PriceGuessingGame.Services
{
    public class PlayerManager : IPlayerManager
    {
        private readonly string _playerFilePath = "player.xml";
        private Player _currentPlayer;

        public PlayerManager()
        {
            LoadPlayer();
        }

        public Player GetCurrentPlayer()
        {
            return _currentPlayer;
        }

        public void SavePlayer(Player player)
        {
            _currentPlayer = player;
            try
            {
                XmlSerializer serializer = new XmlSerializer(typeof(Player));
                using (FileStream fs = new FileStream(_playerFilePath, FileMode.Create))
                {
                    serializer.Serialize(fs, player);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Lỗi khi lưu thông tin người chơi: {ex.Message}");
            }
        }

        private void LoadPlayer()
        {
            if (!File.Exists(_playerFilePath))
            {
                CreateNewPlayer();
                return;
            }

            try
            {
                XmlSerializer serializer = new XmlSerializer(typeof(Player));
                using (FileStream fs = new FileStream(_playerFilePath, FileMode.Open))
                {
                    _currentPlayer = (Player)serializer.Deserialize(fs);
                }
            }
            catch (Exception)
            {
                CreateNewPlayer();
            }
        }

        private void CreateNewPlayer()
        {
            Console.Clear();
            Console.WriteLine("=== CHÀO MỪNG ĐẾN VỚI HÃY CHỌN GIÁ ĐÚNG ===");
            Console.Write("\nNhập tên của bạn: ");
            string playerName = Console.ReadLine().Trim();

            while (string.IsNullOrEmpty(playerName))
            {
                Console.Write("Tên không được để trống. Vui lòng nhập lại: ");
                playerName = Console.ReadLine().Trim();
            }

            _currentPlayer = new Player(playerName);
            SavePlayer(_currentPlayer);
        }
    }
}

// Managers/GameManager.cs

namespace PriceGuessingGame.Managers
{
    public class GameManager
    {
        private readonly IGameService _gameService;
        private readonly IScoreManager _scoreManager;
        private readonly IPlayerManager _playerManager;
        private readonly Player _currentPlayer;

        public GameManager()
        {
            IDataService dataService = new FileDataService();
            _scoreManager = new ScoreManager();
            _playerManager = new PlayerManager();
            _gameService = new GameService(dataService, _scoreManager, _playerManager);
            _currentPlayer = _playerManager.GetCurrentPlayer();
        }

        public void StartGame()
        {
            while (true)
            {
                ShowMenu();
                string choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        _gameService.PlayGame(new EasyLevel());
                        break;
                    case "2":
                        _gameService.PlayGame(new MediumLevel());
                        break;
                    case "3":
                        _gameService.PlayGame(new HardLevel());
                        break;
                    case "4":
                        ShowHighScores();
                        break;
                    case "5":
                        ShowPlayerStats();
                        break;
                    case "6":
                        if (ConfirmExit())
                            return;
                        break;
                    default:
                        Console.WriteLine("\nLựa chọn không hợp lệ!");
                        Console.WriteLine("Nhấn Enter để tiếp tục...");
                        Console.ReadLine();
                        break;
                }
            }
        }

        private void ShowMenu()
        {
            Console.Clear();
            Console.WriteLine($"=== HÃY CHỌN GIÁ ĐÚNG ===");
            Console.WriteLine($"Xin chào, {_currentPlayer.Name}!\n");
            Console.WriteLine("1. Chơi mức Dễ (3 sản phẩm)");
            Console.WriteLine("2. Chơi mức Vừa (5 sản phẩm)");
            Console.WriteLine("3. Chơi mức Khó (8 sản phẩm)");
            Console.WriteLine("4. Xem điểm cao");
            Console.WriteLine("5. Xem thống kê");
            Console.WriteLine("6. Thoát");
            Console.Write("\nNhập lựa chọn của bạn: ");
        }

        private void ShowHighScores()
        {
            Console.Clear();
            Console.WriteLine("=== BẢNG XẾP HẠNG ĐIỂM CAO ===\n");
            List<int> highScores = _scoreManager.GetHighScores();

            if (highScores.Count == 0)
            {
                Console.WriteLine("Chưa có điểm cao nào!");
            }
            else
            {
                for (int i = 0; i < highScores.Count; i++)
                {
                    Console.WriteLine($"{i + 1}. {highScores[i]} điểm");
                }
            }

            Console.WriteLine("\nNhấn Enter để tiếp tục...");
            Console.ReadLine();
        }

        private void ShowPlayerStats()
        {
            // Lấy thông tin người chơi mới nhất
            Player currentPlayer = _playerManager.GetCurrentPlayer();

            Console.Clear();
            Console.WriteLine($"=== THỐNG KÊ NGƯỜI CHƠI ===\n");
            Console.WriteLine($"Tên người chơi: {currentPlayer.Name}");
            Console.WriteLine($"Số lần chơi: {currentPlayer.GamesPlayed}");
            Console.WriteLine($"Tổng điểm: {currentPlayer.TotalScore}");
            Console.WriteLine($"Điểm trung bình: {currentPlayer.AverageScore:F2}");

            Console.WriteLine("\nNhấn Enter để tiếp tục...");
            Console.ReadLine();
        }

        private bool ConfirmExit()
        {
            Console.Clear();
            Console.Write("Bạn có chắc muốn thoát game? (Y/N): ");
            string response = Console.ReadLine().Trim().ToUpper();
            return response == "Y";
        }
    }
}
